{"version":3,"sources":["app.module.css","bll/counter-reducer.tsx","components/counter.tsx","components/counterOption.tsx","App.tsx","reportWebVitals.ts","bll/store.tsx","index.tsx","components/counterOption.module.css","components/counter.module.css"],"names":["module","exports","initialState","value","maxValue","startValue","incButton","setButton","onChangeStartValue","setCounterAC","type","incButtonAC","setButtonAC","Counter","dispatch","useDispatch","state","useSelector","counter","className","style","blockCounter","valueError","blockButton","button","buttonOf","onClick","inc","disabled","CounterOption","useState","setMaxValue","setStartValue","settings","inputSet","input","onChange","e","currentTarget","inputError","setBlock","localStorage","setItem","JSON","stringify","maxValueAC","App","block","blockCounters","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63eade5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockCounters\":\"app_blockCounters__2Dwd8\",\"block\":\"app_block__SDcrQ\"};","// const INC_COUNTER = 'INC-COUNTER'\r\n// const RESET_COUNTER = 'RESET-COUNTER'\r\n// const SET_MAX_VALUE = 'SET-MAX-VALUE'\r\n\r\n\r\nconst initialState = {\r\n    value: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    incButton: false,\r\n    setButton: false,\r\n    onChangeStartValue: 0\r\n}\r\nexport type initialStateType = {\r\n    value: number\r\n    maxValue: number\r\n    startValue: number\r\n    incButton: boolean\r\n    setButton: boolean\r\n    onChangeStartValue: number\r\n}\r\nexport type incCounterACType = {\r\n    type: 'INC-COUNTER'\r\n    inc: number\r\n}\r\ntype setCounterACType = {\r\n    type: 'SET-COUNTER'\r\n    value: number\r\n}\r\ntype maxValueACType = {\r\n    type: 'ONCHANGE-SET-MAX-VALUE'\r\n    maxValue: number\r\n}\r\ntype onChangeValueACType = {\r\n    type: 'ONCHANGE-START-VALUE'\r\n    startValue: number\r\n}\r\ntype incButtonType = {\r\n    type: 'INC-BUTTON'\r\n    incButton: boolean\r\n}\r\ntype onChangeStartValueType = {\r\n    type: 'ON-CHANGE-START-VALUE'\r\n    onChangeStartValue: number\r\n}\r\ntype setButtonTypeACType = {\r\n    type: 'TOGGLE-BUTTON-SET'\r\n    setButton: boolean\r\n}\r\n\r\nexport type ActionTypes = incCounterACType | incButtonType |\r\n    setCounterACType | maxValueACType | onChangeValueACType |\r\n    onChangeStartValueType | setButtonTypeACType\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case 'INC-COUNTER': {\r\n            return {\r\n                ...state,\r\n                value: action.inc + 1\r\n            }\r\n        }\r\n        case 'SET-COUNTER' : {\r\n            return {\r\n                ...state,\r\n                value: action.value\r\n            }\r\n        }\r\n        case 'ONCHANGE-SET-MAX-VALUE': {\r\n            return {\r\n                ...state,\r\n                maxValue : action.maxValue\r\n            }\r\n        }\r\n        case 'ONCHANGE-START-VALUE': {\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        }\r\n        case 'INC-BUTTON': {\r\n            return {\r\n                ...state,\r\n                incButton: action.incButton\r\n            }\r\n        }\r\n        case 'ON-CHANGE-START-VALUE' : {\r\n            return{\r\n                ...state,\r\n                onChangeStartValue: action.onChangeStartValue\r\n            }\r\n        }\r\n        case 'TOGGLE-BUTTON-SET': {\r\n            return {\r\n                ...state,\r\n                setButton: action.setButton\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const onChangeValueAC = (startValue:number): onChangeValueACType => {\r\n    return( { type: 'ONCHANGE-START-VALUE', startValue})\r\n}\r\nexport const incCounterAC = (inc: number): incCounterACType => {\r\n    return {type: 'INC-COUNTER', inc}\r\n}\r\nexport const setCounterAC = (value: number): setCounterACType => {\r\n    return {type: 'SET-COUNTER', value}\r\n}\r\nexport const maxValueAC = (maxValue:number): maxValueACType => {\r\n    return {type: 'ONCHANGE-SET-MAX-VALUE', maxValue}\r\n}\r\nexport const incButtonAC = (incButton: boolean): incButtonType => {\r\n    return {type: 'INC-BUTTON', incButton}\r\n}\r\nexport const onChangeStartValueAC = (onChangeStartValue:number): onChangeStartValueType => {\r\n    return {type: 'ON-CHANGE-START-VALUE', onChangeStartValue}\r\n}\r\nexport const setButtonAC = (setButton:boolean): setButtonTypeACType => {\r\n    return {type: 'TOGGLE-BUTTON-SET', setButton}\r\n}","import React from 'react'\r\nimport style from \"./counter.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../bll/store\";\r\nimport {incButtonAC, incCounterAC, initialStateType, setCounterAC} from \"../bll/counter-reducer\";\r\n\r\n\r\nfunction Counter() {\r\n    const dispatch = useDispatch()\r\n    const state = useSelector<AppStateType, initialStateType>(state => state.counter)\r\n\r\n    const incCounter = () => {\r\n        state.maxValue > state.value ? dispatch(incCounterAC(state.value)) : dispatch(incButtonAC(state.incButton))\r\n    }\r\n    const resetCounter = () => {\r\n        state.setButton = false\r\n        dispatch((setCounterAC(state.value = state.onChangeStartValue)))\r\n    }\r\n    const incorValue = 'Incorrect value'\r\n\r\n    return (\r\n        <div className={style.blockCounter}>\r\n            <div className={state.maxValue === state.value ? style.valueError :\r\n                state.onChangeStartValue < 0 ? style.valueError :\r\n                    style.value}>\r\n                {state.onChangeStartValue < 0 ? incorValue : state.value}</div>\r\n            <div className={style.blockButton}>\r\n                <button\r\n                    className={state.maxValue > state.value ? style.button : style.buttonOf}\r\n                    onClick={incCounter}\r\n                    disabled={state.incButton}\r\n                >inc\r\n                </button>\r\n                <button\r\n                    className={state.onChangeStartValue === state.value && state.setButton === false\r\n                        ? style.buttonOf\r\n                        : style.button}\r\n                    onClick={resetCounter}\r\n                >reset\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport style from './counterOption.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../bll/store\";\r\nimport {\r\n    setCounterAC,\r\n    initialStateType,\r\n    maxValueAC,\r\n    onChangeValueAC,\r\n    incCounterAC,\r\n    incButtonAC, onChangeStartValueAC, setButtonAC\r\n} from \"../bll/counter-reducer\";\r\n\r\n\r\nfunction CounterOption() {\r\n    const [maxValue, setMaxValue] = useState(+'')\r\n    const [startValue, setStartValue] = useState(+'')\r\n    const [valueLocalStorage, setValueLocalStorage] = useState('')\r\n    const state = useSelector<AppStateType, initialStateType>(state => state.counter)\r\n    const dispatch = useDispatch()\r\n\r\n    // useEffect( () => {\r\n    //     let valueAsString = localStorage.getItem('start value')\r\n    //     if (valueAsString) {\r\n    //         let newValue = JSON.parse(valueAsString)\r\n    //         setValueLocalStorage(newValue)\r\n    //         // state.startValue = newValue\r\n    //     }\r\n    // })\r\n    //\r\n    // useEffect( () => {\r\n    //     localStorage.setItem('start value', JSON.stringify(state.startValue))\r\n    // },[valueLocalStorage])\r\n\r\n\r\n    const onClickSet = () => {\r\n        // let valueAsString = localStorage.getItem('start value')\r\n        // if (valueAsString) {\r\n        //     let newValue = JSON.parse(valueAsString)\r\n        //     setValueLocalStorage(newValue)\r\n        //     // state.startValue = newValue\r\n        // }\r\n\r\n        localStorage.setItem('start value', JSON.stringify(state.startValue))\r\n\r\n        state.setButton = false\r\n        state.maxValue > state.startValue ? dispatch(incButtonAC(state.incButton = false)) : dispatch(incButtonAC(state.incButton = true))\r\n        dispatch(setCounterAC(state.value = startValue))\r\n        dispatch(maxValueAC(state.maxValue = maxValue))\r\n        dispatch(setButtonAC(state.setButton = true))\r\n    }\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setButtonAC(state.setButton = false))\r\n        // dispatch(maxValueAC(+e.currentTarget.value))\r\n        return setMaxValue(+e.currentTarget.value)\r\n    }\r\n    const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setButtonAC(state.setButton = false))\r\n        dispatch(onChangeStartValueAC(+e.currentTarget.value))\r\n        return setStartValue(+e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={style.blockCounter}>\r\n            <div className={style.settings}>\r\n                max value:\r\n                <input\r\n                    className={state.setButton ? style.inputSet : style.input}\r\n                    value={maxValue}\r\n                    onChange={onChangeMaxValue}\r\n                    type='number'\r\n                >\r\n                </input>\r\n                start value:\r\n                <input\r\n                    className={state.onChangeStartValue < 0\r\n                        ? style.inputError\r\n                        : state.setButton\r\n                            ? style.inputSet\r\n                        : style.input}\r\n                    value={startValue}\r\n                    onChange={onChangeValue}\r\n                    type='number'\r\n                >\r\n                </input>\r\n            </div>\r\n            <div className={style.setBlock}>\r\n                <button onClick={onClickSet}\r\n                        className={state.setButton\r\n                            ? style.buttonOf\r\n                            : style.button}\r\n                        disabled={state.setButton}\r\n                >set\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterOption","import React, {useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from \"./bll/store\";\nimport style from './app.module.css'\nimport Counter from \"./components/counter\";\nimport CounterOption from \"./components/counterOption\";\n\n\nfunction App() {\n\n    return (\n        <div className={style.block}>\n        <div className={style.blockCounters}>\n            <CounterOption/>\n            <Counter/>\n        </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n// import React, {useEffect, useState} from 'react';\n// import './App.css';\n// import {Counter} from \"./counter\";\n// import {SetMaxMinValue} from \"./SetMaxMinValue\";\n//\n// function App() {\n//   const [valueCounter, setValueCounter] = useState(0)\n//     const [valueStart, setValueStart] = useState()\n//     const [inputMax, setInputMax] = useState <number>(1)\n//     const [inputMin, setInputMin] = useState <number>(0)\n//\n//   return (\n//     <div className=\"App\">\n//\n//         <SetMaxMinValue\n//             setInputMax={setInputMax}\n//             setInputMin={setInputMin}\n//             inputMax={inputMax}\n//             inputMin={inputMin}\n//             setValueCounter={setValueCounter}\n//         />\n//\n//         <Counter\n//             valueCounter={valueCounter}\n//             setValueCounter={setValueCounter}\n//             inputMax={inputMax}\n//             inputMin={inputMin}\n//         />\n//\n//     </div>\n//   );\n// }\n//\n// export default App;\n\n\n/////////////////////////////////////////////////////// LocalStorage\n// import React, {useEffect, useState} from 'react';\n// import './App.css';\n//\n// function App() {\n//     const [value, setValue] = useState(0)\n//\n//     useEffect( () => {\n//         let valueAsString = localStorage.getItem('counterValue')\n//         if (valueAsString) {\n//             let newValue = JSON.parse(valueAsString)\n//             setValue(newValue)\n//         }}, [])\n//\n//     useEffect( () => {\n//         localStorage.setItem('counterValue', JSON.stringify(value))\n//     }, [value])\n//\n//     const incHandeler = () => {\n//         setValue(value + 1)\n//     }\n//     const setToLocalStorage =() => {\n//         localStorage.setItem('counterValue', JSON.stringify(value))\n//         // localStorage.setItem('counterValue + 1', JSON.stringify(value + 1))\n//     }\n//     const setToSessionStorage =() => {\n//         sessionStorage.setItem('counterValue', JSON.stringify(value))\n//\n//     }\n//     const getFromToLocalStorage = () => {\n//         let valueAsString = localStorage.getItem('counterValue')\n//         if (valueAsString) {\n//             let newValue = JSON.parse(valueAsString)\n//             setValue(newValue)\n//         }\n//     }\n//     const clearLocalStorageHandler = () => {\n//         localStorage.clear()\n//         setValue(0)\n//     }\n//     const removeItemLocalStorage = () => {\n//         localStorage.removeItem('counterValue + 1')\n//     }\n//\n//\n//\n//\n//\n//     return (\n//         <div className=\"App\">\n//             <h1>{value}</h1>\n//             <button onClick={incHandeler}>inc</button>\n//             {/*<button onClick={setToLocalStorage}>setToLocalStorage</button>*/}\n//             {/*<button onClick={setToSessionStorage}>setToSessionStorage</button>*/}\n//             {/*<button onClick={getFromToLocalStorage}>getFromToLocalStorage</button>*/}\n//             {/*<button onClick={clearLocalStorageHandler}>clearLocalStorage</button>*/}\n//             {/*<button onClick={removeItemLocalStorage}>removeItemLocalStorage</button>*/}\n//         </div>\n//     );\n// }\n//\n// export default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// type AppStoreType = typeof store\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\nimport style from './app.module.css'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockCounter\":\"counterOption_blockCounter__26oOV\",\"errorRed\":\"counterOption_errorRed__1r8Um\",\"button\":\"counterOption_button__3WO3N\",\"buttonOf\":\"counterOption_buttonOf__2ATiv\",\"setBlock\":\"counterOption_setBlock__3i-Wd\",\"input\":\"counterOption_input__1s2rU\",\"inputSet\":\"counterOption_inputSet__3OorD\",\"inputError\":\"counterOption_inputError__1UJqN\",\"flicker\":\"counterOption_flicker__2ZLRM\",\"settings\":\"counterOption_settings__2PZI_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockCounter\":\"counter_blockCounter__2iuQq\",\"blockButton\":\"counter_blockButton__2CwLV\",\"buttonOf\":\"counter_buttonOf__2pHGW\",\"button\":\"counter_button__1_qvx\",\"value\":\"counter_value__5D2Mk\",\"setBlock\":\"counter_setBlock__1IBv2\",\"inputError\":\"counter_inputError__2usdQ\",\"valueError\":\"counter_valueError__3anaq\",\"flicker\":\"counter_flicker__1F-vr\"};"],"sourceRoot":""}